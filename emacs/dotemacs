(require 'package) ;; You might already have this line
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize) ;; You might already have this line

;; auto install packges
(defun ensure-package-installed (&rest packages)
  "Assure every package is installed, ask for installation if it’s not.
Return a list of installed packages or nil for every skipped package."
  (mapcar
   (lambda (package)
     (if (package-installed-p package)
         nil
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
           (package-install package)
         package)))
   packages))

;; Make sure to have downloaded archive description.
(or (file-exists-p package-user-dir)
    (package-refresh-contents))

;; Activate installed packages
(package-initialize)

;; Assuming you wish to install "iedit" and "magit"
(ensure-package-installed 'org
                          'evil
                          'evil-leader
                          'evil-surround
                          'evil-org
                          'exec-path-from-shell
                          'smart-mode-line
                          'solarized-theme
                          'powerline
                          'powerline-evil
                          'auctex
                          'flatui-theme
                          'airline-themes
                          'org-bullets
                          'zenburn-theme
                          )

;; disable splash scren
(setq inhibit-startup-screen t)

;; wrap like vim
(global-visual-line-mode 1)

;; org-mode facelift
(require 'org-bullets)
(setq org-bullets-bullet-list '("◉" "◎" "○" "►" "◇"))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(setq line-spacing '0.25)

;; Evil model related
(setq evil-want-C-i-jump nil)
(require 'evil-leader)
(global-evil-leader-mode)
(require 'evil-org)
(require 'evil)
(evil-mode t)

;; abosrd exec path so auctex can work
(exec-path-from-shell-initialize)

;; smart mode line
;; (sml/setup)

;; load-theme first
 (load-theme 'zenburn t)



;; initial window sizes
(setq initial-frame-alist
      '(
        (width . 110) ; character
        (height . 54) ; lines
        ))

;; default/sebsequent window sizes
(setq default-frame-alist
      '(
        (width . 150) ; character
        (height . 52) ; lines
        ))

;; powerline setup
(require 'powerline)
(powerline-vim-theme)
(setq ns-use-srgb-colorspace nil) ;; this fixes weird arrow
(require 'airline-themes)
(load-theme 'airline-light t)

;; set up font size
(set-face-attribute 'default nil :height 150)

;; evil takes over calendar
(evil-set-initial-state 'calendar-mode 'normal)

;; evil-surround may be useful
(require 'evil-surround)
(require 'cl)
(global-evil-surround-mode 1)

;; org-mode customization
(setq org-track-ordered-property-with-tag t)
(setq org-enforce-todo-dependency t)
(setq org-agenda-files '("~/Dropbox/org"))
(setq org-agenda-start-on-weekday nil)
(setq org-log-done t)
(eval-after-load 'org-agenda
 '(progn
    (evil-set-initial-state 'org-agenda-mode 'normal)
    (evil-define-key 'normal org-agenda-mode-map
      (kbd "<RET>") 'org-agenda-switch-to
      (kbd "\t") 'org-agenda-goto
      "q" 'org-agenda-quit
      "r" 'org-agenda-redo
      "S" 'org-save-all-org-buffers
      "gj" 'org-agenda-goto-date
      "gJ" 'org-agenda-clock-goto
      "gm" 'org-agenda-bulk-mark
      "go" 'org-agenda-open-link
      "s" 'org-agenda-schedule
      "+" 'org-agenda-priority-up
      "," 'org-agenda-priority
      "-" 'org-agenda-priority-down
      "y" 'org-agenda-todo-yesterday
      "n" 'org-agenda-add-note
      "t" 'org-agenda-todo
      ":" 'org-agenda-set-tags
      ";" 'org-timer-set-timer
      "I" 'helm-org-task-file-headings
      "i" 'org-agenda-clock-in-avy
      "O" 'org-agenda-clock-out-avy
      "u" 'org-agenda-bulk-unmark
      "x" 'org-agenda-exit
      "j"  'org-agenda-next-line
      "k"  'org-agenda-previous-line
      "vt" 'org-agenda-toggle-time-grid
      "va" 'org-agenda-archives-mode
      "vw" 'org-agenda-week-view
      "vl" 'org-agenda-log-mode
      "vd" 'org-agenda-day-view
      "vc" 'org-agenda-show-clocking-issues
      "g/" 'org-agenda-filter-by-tag
      "o" 'delete-other-windows
      "gh" 'org-agenda-holiday
      "gv" 'org-agenda-view-mode-dispatch
      "f" 'org-agenda-later
      "b" 'org-agenda-earlier
      "c" 'helm-org-capture-templates
      "e" 'org-agenda-set-effort
      "n" nil  ; evil-search-next
      "{" 'org-agenda-manipulate-query-add-re
      "}" 'org-agenda-manipulate-query-subtract-re
      "A" 'org-agenda-toggle-archive-tag
      "." 'org-agenda-goto-today
      "0" 'evil-digit-argument-or-evil-beginning-of-line
      "<" 'org-agenda-filter-by-category
      ">" 'org-agenda-date-prompt
      "F" 'org-agenda-follow-mode
      "D" 'org-agenda-deadline
      "H" 'org-agenda-holidays
      "J" 'org-agenda-next-date-line
      "K" 'org-agenda-previous-date-line
      "L" 'org-agenda-recenter
      "P" 'org-agenda-show-priority
      "R" 'org-agenda-clockreport-mode
      "Z" 'org-agenda-sunrise-sunset
      "T" 'org-agenda-show-tags
      "X" 'org-agenda-clock-cancel
      "[" 'org-agenda-manipulate-query-add
      "g\\" 'org-agenda-filter-by-tag-refine
      "]" 'org-agenda-manipulate-query-subtract
      )))

;; normal state shortcuts
(evil-define-key 'normal evil-org-mode-map
  "gh" 'outline-up-heading
  "gp" 'outline-previous-heading
  "gj" (if (fboundp 'org-forward-same-level) ;to be backward compatible with older org version
	   'org-forward-same-level
	  'org-forward-heading-same-level)
  "gk" (if (fboundp 'org-backward-same-level)
	   'org-backward-same-level
	  'org-backward-heading-same-level)
  "gl" 'outline-next-visible-heading
  "t" 'org-todo
  "T" '(lambda () (interactive) (evil-org-eol-call (lambda() (org-insert-todo-heading nil))))
  "H" 'org-shiftleft
  "J" 'org-shiftdown
  "K" 'org-shiftup
  "L" 'org-shiftright
  "o" '(lambda () (interactive) (evil-org-eol-call 'clever-insert-item))
  "O" '(lambda () (interactive) (evil-org-eol-call 'org-insert-heading))
  "$" 'org-end-of-line
  "^" 'org-beginning-of-line
  "<" 'org-metaleft
  ">" 'org-metaright
  "-" 'org-cycle-list-bullet
  (kbd "<tab>") 'org-cycle)

;; my own leader maps
(evil-leader/set-key-for-mode 'org-mode
  "t"  'org-show-todo-tree
  "a"  'org-agenda
  "n"  'org-narrow-to-subtree
  "w"  'widen
  "l"  'evil-org-open-links
  "o"  'evil-org-recompute-clocks
  "s"  'org-schedule
  "d"  'org-deadline
  "r"  'org-archive-subtree-default
)

;; kinda force agenda to show vertically
(defadvice org-agenda (around split-vertically activate)
  (let ((split-width-threshold 140))
    ad-do-it))

;; open agenda when start up
(find-file "~/Dropbox/org/dump.org")
(find-file "~/Dropbox/org/jmp.org")
(org-agenda nil "a")

;; make org-mode latex preview bigger
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

;;; AUCTeX
;; Customary Customization, p. 1 and 16 in the manual, and http://www.emacswiki.org/emacs/AUCTeX#toc2
(setq TeX-parse-self t); Enable parse on load.
(setq TeX-auto-save t); Enable parse on save.
(setq-default TeX-master nil)

(setq TeX-PDF-mode t); PDF mode (rather than DVI-mode)

;; LaTeX-math-mode http://www.gnu.org/s/auctex/manual/auctex/Mathematics.html
(add-hook 'TeX-mode-hook 'LaTeX-math-mode)

;; Copy from Clark Donley's blog
(setq reftex-default-bibliography
  '("~/Dropbox/#papers/everything.bib"))

(setq reftex-bibpath-environment-variables
  '("~/Dropbox/#papers"))

(setq reftex-bibpath-environment-variables
'("~/Library/texmf/bibtex/bib"))
(setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))

(setq reftex-default-bibliography
      (quote
       ("everything.bib")))

(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(autoload 'reftex-mode     "reftex" "RefTeX Minor Mode" t)
(autoload 'turn-on-reftex  "reftex" "RefTeX Minor Mode" nil)
(autoload 'reftex-citation "reftex-cite" "Make citation" nil)
(autoload 'reftex-index-phrase-mode "reftex-index" "Phrase mode" t)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode

;; Make RefTeX faster
(setq reftex-enable-partial-scans t)
(setq reftex-save-parse-info t)
(setq reftex-use-multiple-selection-buffers t)
(setq reftex-plug-into-AUCTeX t)

(setq reftex-cite-prompt-optional-args nil)
(setq reftex-cite-cleanup-optional-args t)


(setq org-link-abbrev-alist
      '(("papers" . "~/Dropbox/#papers/%s.pdf")))

; (setq org-latex-pdf-process '("texi2dvi -p -b -V %f"))
; (define-key org-mode-map (kbd "C-c [") 'org-reftex-citation)


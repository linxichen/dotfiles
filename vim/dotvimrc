" Linxi Chen's .vimrc
"------------------------------------------------------------------------
" Set file script encoding so that => is recognized
"------------------------------------------------------------------------
scriptencoding utf-8
set encoding=utf-8

"------------------------------------------------------------------------
" Configure for Vundle.
" Vundle required to be first configured. Most stuff from Nick Nisi.
"------------------------------------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" list all plugins that you'd like to install here
Plugin 'gmarik/Vundle.vim'       " let Vundle manage Vundle, required
Plugin 'kien/ctrlp.vim'          " fuzzy find files
Plugin 'scrooloose/nerdtree'     " file drawer, open with :NERDTreeToggle
Plugin 'tpope/vim-fugitive'      " the ultimate git helper
Plugin 'tpope/vim-commentary'    " comment/uncomment lines with gcc or gc
Plugin 'L9'                      " plugin from http://vim-scripts.org
Plugin 'Smart-Tabs'              " uses tab for indent but space for alignment
Plugin 'chriskempson/base16-vim' " all color scheme of base16
Plugin 'scrooloose/syntastic'    " pluging that checks syntax errors
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'vim-airline/vim-airline' " plugin that gives awesome status line
Plugin 'vim-airline/vim-airline-themes'
Plugin 'edkolev/tmuxline.vim'    " plugin that improves tmux status line
Plugin 'junegunn/vim-easy-align' " plugin that help you easily align
Plugin 'altercation/vim-colors-solarized'
Plugin 'vim-latex/vim-latex'     " LaTex-Suite
Plugin 'ervandew/supertab'       " used tab for complete
Plugin 'vimoutliner/vimoutliner' " the awesome outliner
Plugin 'tpope/vim-surround'      " powerful surround plugin
Plugin 'tpope/vim-speeddating'   " C-a and C-x to change time
Plugin 'jceb/vim-orgmode'
Plugin 'jnurmine/Zenburn'
Plugin 'yuratomo/w3m.vim'        " put w3m browser inside vim
Plugin 'vimwiki/vimwiki'
Plugin 'takac/vim-hardtime'     " allows for hardmode

" Inactive plugins that you'd try later on
" Plugin 'ervandew/screen' " required by VimLab to manage MATLAB session
" Plugin 'dajero/VimLab' " plugin to use MATLAB inside vim
" Plugin 'lervag/vimtex' " the light-feature latex vim plugin
" Plugin 'Valloric/YouCompleteMe' " the powerful complettion plugin

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins;
"                   - append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo;
"                   - append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins;
"                   - append `!` to auto-approve removal
" see :h vundle for more details or wiki for FAQ

"------------------------------------------------------------------------
" General settings
"------------------------------------------------------------------------
" See http://tedlogan.com/techblog3.html for an explaination of tabs in vim
set noexpandtab                      " don't use space to replace tab
set number                           " show line number
set tabstop=4                        " set tab to be 4 columns wide
set softtabstop=4                    " # of columns when hit tab
set shiftwidth=4                     " # of columns indent is (== >> <<)
set cursorline                       " show underline of cursor
set autoindent                       " always set autoindenting on
set showmatch                        " To show briefly the matching bracket.
set backspace=indent,eol,start       " backspacing over everything
set backup                           " keep a backup file
set history=500                      " keep 50 lines of command line history
set ruler                            " show the cursor position all the time
set showcmd                          " display incomplete commands
set incsearch                        " do incremental searching
syntax on                            " switch syntax highlighting on
set mouse=a                          " enable mouse in emulators
set ttymouse=xterm2                  " mouse behave in the xterm way
set hlsearch                         " highlight words you are searching
set list                             " showing hidden characters tab
set listchars=tab:▸\                 " nice little arrow to show tab
let base16colorspace=256             " colors present in 256 colorspace
set term=screen-256color             " set 256 color screen to match with tmux
set t_Co=256                         " set terminal to have 256 colors
set background=dark                 " stuff
colorscheme zenburn         " use the scheme base16-ocean
let g:solarized_termcolors=256
set autoread                         " detect file change
set clipboard=unnamed                " merge vim and system clipboard
set completeopt+=longest             " show the longest common word first
set textwidth=80                     " good old 72 char limit
autocmd FileType plaintex,tex,latex set textwidth=120 " allow 120 width for tex
set colorcolumn=+1                   " vertical bar at tw+1 column
set omnifunc=syntaxcomplete#Complete " enables omni complete
set backupdir=~/.vim//             " set  backupdir to avoid ~ after ext
set iskeyword-=_                    " set underscore as word boundary
autocmd BufRead,BufNewFile *.mod set filetype=dynare "try to know dynare

" Inactive settings, might play with later
" set relativenumber                  " show relative line number
" set formatoptions+=t             " auto-wrap text excl. comments
set ttyfast                      " faster redrawing?

"------------------------------------------------------------------------
" vim-commentary settings
"------------------------------------------------------------------------
autocmd FileType matlab set commentstring=%\ %s

"------------------------------------------------------------------------
" vim-airline settings
"------------------------------------------------------------------------
set laststatus=2                  " alwyas show airline bar
" let the right triangle show up in statusline
let g:airline_powerline_fonts = 1
"ok space after tab below
let g:airline#extensions#whitespace#mixed_indent_algo = 2
let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing']
let g:airline#extensions#whitespace#checks += ['long']
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = ''
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''
" let g:airline_symbols.branch = ''
" let g:airline_symbols.readonly = ''
" let g:airline_symbols.linenr = ''

"------------------------------------------------------------------------
" syntastic settings
"------------------------------------------------------------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_w = 1
let my_includes = ['/usr/local/cuda-7.5/include']
let my_includes = ['/usr/local/cuda-7.5/include/thrust']
let my_includes += ['/Developer/NVIDIA/CUDA-7.5/include']
let my_includes += ['/Developer/NVIDIA/CUDA-7.5/include/thrust']
let my_includes += ['/usr/local/include']
let my_includes += ['./cudatools/include']
let my_includes += ['.']
let g:syntastic_cpp_include_dirs = my_includes
let g:syntastic_cpp_compiler_options = '-std=c++11'
let g:syntastic_nvcc_include_dirs = my_includes
let g:syntastic_nvcc_compiler_options = '-std=c++11'
let g:syntastic_c_include_dirs = my_includes
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_remove_include_errors = 1

"------------------------------------------------------------------------
" easyalign settings
"------------------------------------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"------------------------------------------------------------------------
" CUDA syntax highlighting settings
"------------------------------------------------------------------------
au BufNewFile,BufRead *.cu set filetype=cuda
au BufNewFile,BufRead *.cuh set filetype=cuda

"------------------------------------------------------------------------
" Dynare syntax highlighting
"------------------------------------------------------------------------
au BufNewFile,BufRead *.mod set filetype=c

"------------------------------------------------------------------------
" vimtex settings to use skim
"------------------------------------------------------------------------
if has("mac")
	let g:vimtex_view_general_viewer
	\ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
	let g:vimtex_view_general_options = '@line @pdf @tex'
elseif has("unix")
	let g:vimtex_view_general_viewer = 'okular'
	let g:vimtex_view_general_options = '--unique @pdf\#src:@line@tex'
	let g:vimtex_view_general_options_latexmk = '--unique'
endif
let g:vimtex_fold_enabled=1

"------------------------------------------------------------------------
" vim-latex, aka LaTex-Suite settings
"------------------------------------------------------------------------
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'
" Change default target to pdf, if not dvi is used
let g:Tex_DefaultTargetFormat = 'pdf'
" Setup the compile rule for pdf to use pdflatex with synctex enabled
let g:Tex_CompileRule_ps = 'dvips -Pwww -o $*.ps $*.dvi'
let g:Tex_CompileRule_pspdf = 'ps2pdf $*.ps'
let g:Tex_CompileRule_dvipdf = 'dvipdfm $*.dvi'
let g:Tex_CompileRule_pdf = 'pdflatex -synctex=1 --interaction=nonstopmode $*'
" PDF display rule
let g:Tex_ViewRule_dvi = 'texniscope'
let g:Tex_ViewRule_ps = 'Preview'
let g:Tex_ViewRule_pdf = 'Skim'
let g:Tex_FormatDependency_ps  = 'dvi,ps'
let g:Tex_FormatDependency_pspdf = 'dvi,ps,pspdf'
let g:Tex_FormatDependency_dvipdf = 'dvi,dvipdf'

"------------------------------------------------------------------------
" Youcomplete me settings to use with vimtex
"------------------------------------------------------------------------
" if !exists('g:ycm_semantic_triggers')
" 	let g:ycm_semantic_triggers = {}
" endif
" let g:ycm_semantic_triggers.tex = [
" 			\ 're!\\[A-Za-z]*(ref|cite)[A-Za-z]*([^]]*])?{([^}]*,?)*',
" 			\ 're!\\includegraphics([^]]*])?{[^}]*',
" 			\ 're!\\(include(only)?|input)\{[^{}]*'
" 			\ ]
" let g:ycm_register_as_syntastic_checker = 0

"------------------------------------------------------------------------
" Youcomplete me settings to use with C++ family
"------------------------------------------------------------------------
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py" " for C++

"------------------------------------------------------------------------
" better whitespace settings
"------------------------------------------------------------------------
let g:better_whitespace_verbosity=1
let g:better_whitespace_filetypes_blacklist=['.tex']

"------------------------------------------------------------------------
" tmuxline settings
"------------------------------------------------------------------------
let g:tmuxline_powerline_separators = 0
let g:airline#extensions#tmuxline#enabled = 1

"------------------------------------------------------------------------
" vimwiki setup
"------------------------------------------------------------------------
let g:vimwiki_list = [{'path': '~/my_site/',
                       \ 'syntax': 'markdown', 'ext': '.md'}]

"------------------------------------------------------------------------
" vim hardmode setup
"------------------------------------------------------------------------
autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()

"------------------------------------------------------------------------
" vim hardmode setup
"------------------------------------------------------------------------
let g:hardtime_default_on = 1
let g:hardtime_maxcount = 1
let g:hardtime_timeout = 4000
